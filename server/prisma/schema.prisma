// This is your Prisma schema file. Learn more: https://pris.ly/d/prisma-schema
// Ensure DATABASE_URL is set in .env (e.g., postgresql://user:password@localhost:5432/dbname)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  AUTHOR
  ADMIN
}

enum ReactionType {
  LIKE
  LOVE
  WOW
  HAHA
  SAD
  ANGRY
}

enum RoleRequestStatus {
  PENDING
  APPROVED
  DENIED
}

model User {
  id        String  @id @default(cuid())
  cognitoId String  @unique
  email     String  @unique
  name      String?
  avatarUrl String?
  role      Role    @default(USER)

  posts        Post[]        @relation("AuthoredPosts")
  comments     Comment[]     @relation("UserComments")
  reactions    Reaction[]    @relation("UserReactions")
  roleRequests RoleRequest[] @relation("UserRoleRequests")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Post {
  id            String  @id @default(cuid())
  title         String
  slug          String  @unique
  content       String
  excerpt       String?
  coverImageUrl String?

  published   Boolean   @default(false)
  publishedAt DateTime?
  featured    Boolean   @default(false)

  authorId String
  author   User   @relation("AuthoredPosts", fields: [authorId], references: [id], onDelete: Cascade)

  comments  Comment[]  @relation("PostComments")
  reactions Reaction[] @relation("PostReactions")

  categories PostCategory[]
  tags       PostTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@map("posts")
}

model Category {
  id   String @id @default(cuid())
  name String @unique
  slug String @unique

  posts PostCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Tag {
  id   String @id @default(cuid())
  name String @unique
  slug String @unique

  posts PostTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

model PostCategory {
  postId     String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([postId, categoryId])
  @@map("post_categories")
}

model PostTag {
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id      String @id @default(cuid())
  content String

  postId String
  post   Post   @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)

  parentId String?
  parent   Comment?  @relation("ThreadedComments", fields: [parentId], references: [id], onDelete: SetNull)
  replies  Comment[] @relation("ThreadedComments")

  reactions Reaction[] @relation("CommentReactions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@map("comments")
}

model Reaction {
  id   String       @id @default(cuid())
  type ReactionType

  userId String
  user   User   @relation("UserReactions", fields: [userId], references: [id], onDelete: Cascade)

  postId String?
  post   Post?   @relation("PostReactions", fields: [postId], references: [id], onDelete: Cascade)

  commentId String?
  comment   Comment? @relation("CommentReactions", fields: [commentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId], name: "user_post_reaction")
  @@unique([userId, commentId], name: "user_comment_reaction")
  @@map("reactions")
}

model RoleRequest {
  id            String            @id @default(cuid())
  userId        String
  user          User              @relation("UserRoleRequests", fields: [userId], references: [id], onDelete: Cascade)
  requestedRole Role              @default(AUTHOR)
  status        RoleRequestStatus @default(PENDING)
  reason        String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([userId])
  @@map("role_requests")
}
